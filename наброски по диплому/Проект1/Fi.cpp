/****************************************************************************
	  Интеграл вероятности нормального распределения
      Ф(х)=nint(x,0)
****************************************************************************/

//  Алгоритм I. D. Hill'a и S. A. Joyce (алгоритм 304), улучшенный
// A. G. Adams'ом B. Holmgren'ом
//  Параметры :
//  x     - аргумент функции распределения
//  upper - false или true в зависимости от того,требуется вычислить функцию
// распределения Ф(х) или ее дополнение до 1
//  Вызываемые процедуры : нет
//  Замечание :
// когда среднее и дисперсия нормального закона равны m и s соответственно,
// тогда параметр х полагают равным (х-m)/s

double nint (double x,int upper)
{
 double _nint;
 if(x==0.0)_nint=0.5;
 else
 {
   double n,x2,y;
   upper=(int)(upper==(x>0.0));
   x=fabs(x);
   x2=x*x;
   y=0.398942280401433*exp(-0.5*x2);//1/sqrt(2*pi)
   n=y/x;
   if(!upper && 1.0-n==1.0)_nint=1.0;else
   if(upper && n==0.0)_nint=0.0;
   else
   {
    double s,t;
    if(x>(upper ? 2.32 : 3.5))
    {
     double p1,p2,q1,q2,a1,a2,m;
     a1=2.0;a2=0.0;
     n=x2+3.0;p1=y;
     q1=x;p2=(n-1.0)*y;
     q2=n*x;m=p1/q1;
     t=p2/q2;
     if(!upper){m=1.0-m;t=1.0-t;}
     n+=4;
     do
     {
      a1-=8.0;a2+=a1;
      s=a2*p1+n*p2;
      p1=p2;p2=s;
      s=a2*q1+n*q2;
      q1=q2;q2=s;
      s=m;m=t;
      if(q2>1e30){p1*=1e-30;p2*=1e-30;q1*=1e-30;q2*=1e-30;}
      t= upper ? p2/q2 : 1.0-p2/q2;
      n+=4;
     }while(m!=t && s!=t);
     _nint=t;
    }
    else
    {
     s=x=y*x;n=3.0;t=0.0;
     while(s!=t)
     {
      t=s;
      x=x*x2/n;
      s+=x;
      n+=2.0;
     }
     _nint= upper ? 0.5-s : 0.5+s;
    }
   }
 }
 return(_nint);
}
/*********************************************************************
      квантиль стандартного нормального распределения
*********************************************************************/
 double ndtri(double p)
 {
  double d,x,t,t2;
  d=p;
  if(d>0.5)d=1.-d;
  t2=log(1./(d*d));
  t=sqrt(t2);
  x=t-(2.515517+0.802853*t+0.010328*t2)/
      (1.0+1.432788*t+0.189269*t2+0.001308*t*t2);
  if(p<=0.5)x=-x;
  return(x);
 }
/********************************************************************
   Генерация случайного числа, имеющего нормальное распределение
*********************************************************************/
//сдвиг=0, масштаб=1
 double gen_norm()
 {
  double r;
  r=gen_rav();//случ. вел., равномерно распределенная на (0,1)
  r=ndtri(r);
  return(r);
 }
/******************************************************************************
Генерация случайного числа, имеющего распределение наибольших значений
******************************************************************************/
//сдвиг=0, масштаб=1
double gen_max()
{
   double r;
   r=gen_rav();//случ. вел., равномерно распределенная на (0,1)
   r=-log(-log(r));
   return(r);
}
